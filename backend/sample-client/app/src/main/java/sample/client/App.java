/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sample.client;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.UUID;

import io.carbynestack.amphora.client.AmphoraClient;
import io.carbynestack.amphora.client.DefaultAmphoraClient;
import io.carbynestack.amphora.common.AmphoraServiceUri;
import io.carbynestack.amphora.common.exceptions.AmphoraClientException;

public class App {
    final private AmphoraClient amphoraClient;
    
    public App(List<String> amphoraEndpoints, BigInteger prime, BigInteger r, BigInteger rInv) throws AmphoraClientException {
        amphoraClient = DefaultAmphoraClient.builder()
            .endpoints(amphoraEndpoints.stream()
                .map(AmphoraServiceUri::new)
                .collect(Collectors.toList()))
            .prime(prime)
            .r(r)
            .rInv(rInv)
            .build();
    }
    
    public String getGreeting() {
        return "Hello World!";
    }

    private static Amphora makeAmphoraClient() throws AmphoraClientException {
        List<String> amphoraEndpoints = new ArrayList<>();
        amphoraEndpoints.add("http://172.18.1.128.sslip.io/amphora");
        amphoraEndpoints.add("http://172.18.2.128.sslip.io/amphora");
        
        BigInteger prime = new BigInteger("198766463529478683931867765928436695041");
        BigInteger r = new BigInteger("141515903391459779531506841503331516415");
        BigInteger rInv = new BigInteger("133854242216446749056083838363708373830");
        
        return new Amphora(amphoraEndpoints, prime, r, rInv);
    }

    public static void main(String[] args) throws AmphoraClientException {
        // Get the command line arguments
        if (args.length > 2) {
            System.err.println("Usage:\n\tcheck <prescription name> <threshold>");
        }
        String prescription = args[0];
        int threshold = Integer.parseInt(args[1]);


        Amphora amphora = App.makeAmphoraClient();

        // Create the secret for the threshold
        UUID thresholdSecret = amphora.createThresholdSecret(threshold);
        
        // Get the target prescription secret
        UUID prescriptionSecret = amphora.getPrescriptionSecret(prescription);
        

        // Remove the threshold secret
        amphora.deleteThresholdSecret(thresholdSecret);
    }
}
